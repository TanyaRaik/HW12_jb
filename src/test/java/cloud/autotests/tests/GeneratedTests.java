package cloud.autotests.tests;

import cloud.autotests.helpers.DriverUtils;
import com.codeborne.selenide.logevents.SelenideLogger;
import io.qameta.allure.Description;
import io.qameta.allure.selenide.AllureSelenide;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import static com.codeborne.selenide.CollectionCondition.size;
import static com.codeborne.selenide.Condition.text;
import static com.codeborne.selenide.Selenide.*;
import static com.codeborne.selenide.Selenide.open;
import static com.codeborne.selenide.Selenide.title;
import static io.qameta.allure.Allure.step;
import static org.assertj.core.api.Assertions.assertThat;


public class GeneratedTests extends TestBase {

    @Test
    @Description("Autogenerated test")
    @DisplayName("Page title should have header text")
    void titleTest() {
        step("Open url 'https://www.jetbrains.com/'", () ->
            open("https://www.jetbrains.com/"));

        step("Page title should have text 'JetBrains: Essential tools for software developers and teams'", () -> {
            String expectedTitle = "JetBrains: Essential tools for software developers and teams";
            String actualTitle = title();

            assertThat(actualTitle).isEqualTo(expectedTitle);
        });
    }

    @Test
    @Description("Navigation bar test")
    @DisplayName("Check values in Navigation bar")
    void NavigationBarTest() {
        step("Open url 'https://www.jetbrains.com/'", () ->
                open("https://www.jetbrains.com/"));

        step("Check navigation bar", () -> {
            SelenideLogger.addListener("allure", new AllureSelenide());
            $(".site-header__inner").shouldHave(text("Developer Tools"));
            $(".site-header__inner").shouldHave(text("Team Tools"));
            $(".site-header__inner").shouldHave(text("Learning Tools"));
            $(".site-header__inner").shouldHave(text("Solutions"));
            $(".site-header__inner").shouldHave(text("Store"));
        });
    }

    @Test
    @Description("Developer Tools link test")
    @DisplayName("Check link to Developer Tools ")
    void DeveloperToolsTest() {
        step("Open url 'https://www.jetbrains.com/'", () ->
                open("https://www.jetbrains.com/"));

        step("Check link to Developer Tools exists on main page", () -> {
            SelenideLogger.addListener("allure", new AllureSelenide());
            $(".page__content ").shouldHave(text("Developer Tools"));
            $(".page__content ").shouldHave(text("The complete developer toolkit"));
            $(".page__content ").shouldHave(text("Choose your tool"));
        });

        step("Click 'Choose your tool'", () -> {
            SelenideLogger.addListener("allure", new AllureSelenide());
            $x("//a[@class='wt-link wt-link_theme_dark']").click();
        });

        step("Check header on Development tools page\"'", () -> {
            SelenideLogger.addListener("allure", new AllureSelenide());
            $(".page__content ").shouldHave(text("Find the right tool"));
        });
    }

    @Test
    @Description("Development tools Number test")
    @DisplayName("Check Development tools Number")
    void DeveloperToolsNumberTest() {
        step("Open url 'https://www.jetbrains.com/'", () ->
                open("https://www.jetbrains.com/"));

        step("Click 'Choose your tool'", () -> {
            SelenideLogger.addListener("allure", new AllureSelenide());
            $x("//a[@class='wt-link wt-link_theme_dark']").click();
        });

        step("Check number of items on Development tools page", () -> {
            SelenideLogger.addListener("allure", new AllureSelenide());
            $x("//div[@class='wt-row wt-row_size_m wt-offset-top-sm-24']").findAll("div[data-test='card']").shouldHave(size(14));
        });
    }

    @Test
    @Description("Development tools Filters test")
    @DisplayName("Check Development tools Filters")
    void DeveloperToolsFiltersTest() {
        step("Open url 'https://www.jetbrains.com/'", () ->
                open("https://www.jetbrains.com/"));

        step("Click 'Choose your tool'", () -> {
            SelenideLogger.addListener("allure", new AllureSelenide());
            $x("//a[@class='wt-link wt-link_theme_dark']").click();
        });

        step("Check filters", () -> {
            SelenideLogger.addListener("allure", new AllureSelenide());
            $(".filter__list").findAll("label[data-test='list-item']").shouldHave(size(21));
        });

        step("Write text in filter field", () -> {
            SelenideLogger.addListener("allure", new AllureSelenide());
            $x("//div[@class='filter']//input[@placeholder='Search']").setValue ("Java").pressEnter();
        });

        step("Check filters", () -> {
            SelenideLogger.addListener("allure", new AllureSelenide());
            $(".filter__list").findAll("label[data-test='list-item']").shouldHave(size(2));
            $(".filter__list ").shouldHave(text("Java"));
            $(".filter__list ").shouldHave(text("JavaScript, TypeScript"));
        });
    }
    @Test
    @Description("Autogenerated test")
    @DisplayName("Page console log should not have errors")
    void consoleShouldNotHaveErrorsTest() {
        step("Open url 'https://www.jetbrains.com/'", () ->
            open("https://www.jetbrains.com/"));

        step("Console logs should not contain text 'SEVERE'", () -> {
            String consoleLogs = DriverUtils.getConsoleLogs();
            String errorText = "SEVERE";

            assertThat(consoleLogs).doesNotContain(errorText);
        });
    }
}